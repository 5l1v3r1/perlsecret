=head1 NAME
X<operator, secret>

perlsecret - Perl secret operators and constants

=head1 SYNOPSIS

Perl secret operators:

    Operator     Nickname                Function
    ================================================
    0+           Venus                   numification
    @{[ ]}       Babycart                list interpolation
    !!           Bang bang               boolean conversion
    }{           Eskimo greeting         END block for one-liners
    ~~           Inchworm                scalar
    ~-           Inchworm on a stick     high-precedence decrement
    -~           Inchworm on a stick     high-precedence increment
    -+-          Space station           high-precedence numification
    =( )=        Goatse                  scalar / list context
    =< >=~       Flaming X-Wing          
    -=!   -=!!   Flathead
    +=!   +=!!   Phillips
    x=!   x=!!   Pozidriv
    *=!   *=!!   Torx

Perl secret constants:

    Constant     Nickname                Value
    =================================================
    <=><=><=>    Space fleet             0
    <~>          Amphisbaena             $ENV{HOME}

=head1 DESCRIPTION

Perl has a long tradition of giving nicknames to some of its operators
(a form of Huffmanisation?). These nicknames are based on the appearance
of the operator, rather than its function. The well-known examples
are the I<diamond operator> (C<< <> >>) and the I<spaceship operator>
(C<< <=> >>). Some lesser known Perl operators with a nickname are
the I<fat comma> (C<< => >>) and I<yada yada> (C<< ... >>).

The Perl "I<secret operators>" have been discovered (or created) by
Perl obfuscators and golfers, usually when looking for a shorter way to
perform a given operation.
These secret "operators" are not operators in the sense that the Perl
parser recognize them, but in the sense that these Perl programmers
have seen them often enough to recognize them and eventually add them
to their toolbox.
These "secret" operators are not secret in the sense that the Perl
community is trying to hide them from the general public, but in the
sense that they have to be discovered by their future user (or be
transmitted by a fellow programmer), because there are not explicitely
documented.

The secret operators often have nicknames. Actually, they B<have> to
have a nickname, because they usually don't have a real name.
Like the above Perl operators, their name is usually related to their shape.

The term "secret operator" was probably coined by Abigail in a
C<comp.lang.perl.misc> post in January 2003.

=head2 A word of warning

There is a good reason this page is not listed in the main documentation
page: many of those "operators" are not suitable for production use.
The secret operators are used by golfers, obfuscators and people who like
to have fun with their favorite programming language. It also wouldn't
be much of a secret if it was listed in the main manual page. C<;-)>

You're welcome to try these at home, but they might not be safe for work!

=head1 SECRET OPERATORS

The following section presents the Perl secret operators, with
some historical context, an explanation of how they work and
examples of use.

=head2 Venus C< 0+ > or C< +0 >

The I<Venus> operator performs the numification of the value on its
right/left, depending of the version used. (This is accomplished by
using the identity element for the addition).

    print 0+ '23a';                 # 23

    print 0+ '3.00';                # 3

    print 0+ '1.2e3';               # 1200

    print 0+ '42 EUR';              # 42

    print 0+ 'two cents';           # 0

    $ref = [];
    print 0+ $ref, ' ', "$ref";     # 164094424 ARRAY(0x9c7e1d8)

    print 0+ $!, ' ', $!;           # 2 No such file or directory


Note that C<0+> is the method name used for "numeric conversion" by
the C<autoload> module.

=head2 Baby cart C<< @{[ ]} >>

Discovered by Randal L. Schwartz or Larry Wall, 1994.
(Other nicknames: "shopping-trolley", "pram", "turtle")

The I<baby cart> operator performs list interpolation inside a string.
The list items are separated by the value of C<$">.

    # SQL in a heredoc
    local $" = ',';
    my $sth = $self->execute( << "SQL" );
     SELECT id, name, salary
       FROM employee
      WHERE id IN (@{[ keys %employee ]})
    SQL

    # process args in %arg
    # and spit out the unknown ones
    die "Uuh?: @{[ sort keys %arg ]}\n"

This is a I<container> (or a I<circumfix> operator). The statement
inside the C<[]> is run in list context, stored in an anonymous array,
which is immediately dereferencedi by C<@{}>.

=head2 Bang bang C<!!>

This operator performs boolean conversion, by performing logical negation
twice.

    my $true  = !! 'a string';   # now 1
    my $false = !! undef;        # now ''

=head2 Eskimo greeting C<< }{ >>

Discovered by Abigail, in the late nineties.

The I<eskimo greeting> operator is an C<END> block for one-liners.

The following program counts and prints the number of lines in the input:

    $ perl -lne '}{print$.'

The eskimo greeting abuses the way the B<-p> and B<-n> options generate
Perl code (as shown by using the C<B::Deparse> module):

    $ perl -MO=Deparse -lne '}{print$.'
    -e syntax OK
    BEGIN { $/ = "\n"; $\ = "\n"; }
    LINE: while (defined($_ = <ARGV>)) {
        chomp $_;
    }
    {
        print $.;
    }

=head2 Inchworm C< ~~ >

This operator is basically a shorter for C<scalar> (shaves 4 characters!)

    $ perl -lEsay~~localtime
    Tue Mar 13 19:53:25 2012

The inchworm looks very much like the smart-match operator introduced
in Perl 5.10, but since it's actually a sequence of two unary operators,
the Perl parser can't mix it up with the binary smart-match.

=head2 Inchworm on a stick C< ~- >

Discovered by Ton Hospel, 2002.

The inchworm on a stick performs high-precedence decrement on
integers (on a complement two architecture). The C version works
on all integers, but the Perl version, due to the implementation
of C< ~ > (which must also support strings) I<only works with integers
greater than C<0>>.

This golfing technique allows to get rid of a pair of parentheses:

    $y = ~-$x * 4;    # identical to $y = ($x-1)*4;

Here's the proof:

    $x - 1 == - ( -$x ) - 1

In complement two architectures, to get the opposite of a number,
all you need to do is flip all bits, and add 1. I.e.,

    -$i == ~$i + 1

Using this to replace C< - ( -$x ) > in the above identity, we get:

    $x - 1 == ( ~-$x + 1 ) - 1

And after eliminating the ones from the equation,

    $x - 1 == ~-$x

QED.


There is a reversed version of the inchworm on a stick: C<-~>.
It does a high-precedence increment. Again, the C version works
on all integers (on complement two architectures), while the Perl
version I<only works on integers lesser than C<0>>.

The proof is similar to the previous one:

    $x + 1 == - ( -$x ) + 1

    $x + 1 == - ( ~$x + 1 ) + 1

    $x + 1 == -~$x - 1 + 1

    $x + 1 == -~$x


In both versions, the high precedence comes from the fact that C<~>
and unary C<-> both have higher precedence than all other arithmetic
operators (except C<**>).


=head2 Space station C< -+- >

Discovered by Alistair McGlinchy, 2005.

This operator performs a high precedence numification.

    print -+- '23a';                # 23

    print -+- '3.00';               # 3

    print -+- '1.2e3';              # 1200

    print -+- '42 EUR';             # 42

    print -+- 'two cents';          # 0

    $ref = [];
    print -+- $ref, ' ', "$ref";    # 151097816 ARRAY(0x90191d8)

    print -+- $!, ' ', $!;          # 2 No such file or directory

At first, this looks exactly like the Venus operator. However, because
the Venus operator uses a binary C<+>, it has a lower precedence than
the multiplicative operators like C<*> or C<x>. On the other hand,
the space station operator is the concatenation of three unary operators,
and therefore has higher precedence.

In the following example, we'll try to print the numification of
the string C<'20GBP'> (i.e. C<'20'>) three times.

    # wrong: prints the numification of '20GBP20GBP20GBP'
    print 0+ '20GBP' x 3;            # 20

    # wrong: does the equivalent of ( print '20' ) x 3
    print( 0+ '20GBP' ) x 3;         # 20

    # right: but too lengthy, too lispy
    print( ( 0 + '20GBP' ) x 3 );    # 202020

    # right: uses the space station operator
    print -+- '20GBP' x 3;           # 202020

=head2 Goatse C< =( )= >

If you don't understand the name of this operator, consider yourself lucky.
You are advised to B<not> search the Internet for an explanation.

This is a container.

=head2 Flaming X-Wing C<< =<>=~ >>

Discovered by Philippe Bruhat, 2007.

=head2 Screwdriver operators

Discovered by Dmitry Karasic, while looking for !-based operators.

flathead
phillips
pozidriv (discovered by Philippe Bruhat (BooK) while preparing a talk about
the secret operators)
torx


=head1 SECRET CONSTANTS

=head2 Space fleet C<< <=><=><=> >>

Discovered by Damian Conway

Even though it looks like a sequence of three spaceship operators,
only the middle ship is an actual spaceship.

value: 0.

=head2 Amphisbaena C<< <~> >>

Discovered by RafaÃ«l Garcia-Suarez.

Under Unix, will return the real user home directory.

=head1 AUTHOR

Philippe Bruhat (BooK)

=cut


definition of "secret operator"

perl operators with a nickname
C<< <> >> diamond
C<< <=> >> spaceship
C<< <= >> fat comma

Secret operators
C<}{> Eskimo greeting
C<0+> venus
C<!!> bang bang
C<-+-> Space station
C<~~> Inchworm
C<~-> Inchworm on a stick
C<@{[]}> baby cart, shopping trolley
C<< =<>=~ >> Flaming X-Wing
C<=()=> Goatse
C<< <<m=~m>> m; >> Double-bladed killer orc sword

Screwdriver operators

Secret constants
C<< <=><=><=> >> Space fleet
C<< <~> >> Amphisbaena

=head2 Inchworm

discovered by:
named by:
one line description:
description:
code example

=head2 Finding other secret operators

=head1 AUTHOR AND COPYRIGHT

Copyright 2010 Philippe Bruhat (BooK).

This documentation is free; you can redistribute it and/or modify it
under the same terms as Perl itself.

=head2 Acknowledgments

The author would like to thank JosÃ© Castro, Andrew Savige, Dmitry
Karasik and the Fun With Perl mailing list.

=cut

